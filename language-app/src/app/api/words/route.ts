import { GEMINI_API_KEY } from "@/config/ENV";
import { getUserId } from "@/lib/auth";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { PrismaClient } from "@prisma/client";
import { NextResponse } from "next/server"; // Next.js„ÅÆÂ†¥Âêà„Å´‰ΩøÁî®

// const prompt = `JSONÂΩ¢Âºè„ÅßÂçòË™û„Äå{word}„Äç„Å´Èñ¢„Åô„ÇãÊÉÖÂ†±„ÇíÊèê‰æõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ‰ª•‰∏ã„ÅÆÈ†ÖÁõÆ„ÇíÂé≥ÂØÜ„Å™JSONÂΩ¢Âºè„ÅßÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

// * **etymology:** Ë™ûÊ∫êÔºàËã±Ë™ûÔºâ
// * **exampleSentence:** ‰æãÊñáÔºàËã±Ë™ûÔºâ
// * **contextLearning:** ‰ΩøÁî®Áä∂Ê≥ÅÔºàËã±Ë™ûÔºâ
// * **pronunciation:** Áô∫Èü≥
//   * **american:** „Ç¢„É°„É™„Ç´Ëã±Ë™û„ÅÆÁô∫Èü≥ÔºàÂõΩÈöõÈü≥Â£∞Ë®òÂè∑Ôºâ
//   * **british:** „Ç§„ÇÆ„É™„ÇπËã±Ë™û„ÅÆÁô∫Èü≥ÔºàÂõΩÈöõÈü≥Â£∞Ë®òÂè∑Ôºâ
// * **usageLevel:** ‰ΩøÁî®„É¨„Éô„É´Ôºà1:formal „Åæ„Åü„ÅØ 2:casualÔºâ

// **Âá∫Âäõ‰æã:**
// {
//   "etymology": "From Greek...",
//   "exampleSentence": "The etymology...",
//   "contextLearning": "Etymology is often used...",
//   "pronunciation": {
//     "american": "/Àå…õt…™Ààm…ëÀêl…ôd íi/",
//     "british": "/Àå…õt…™Ààm…íl…ôd íi/"
//   },
//   "usageLevel": "1"
// }
// `;

const prompt = `JSONÂΩ¢Âºè„ÅßÂçòË™û„Äå{word}„Äç„Å´Èñ¢„Åô„ÇãÊÉÖÂ†±„ÇíÊèê‰æõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ‰ª•‰∏ã„ÅÆÈ†ÖÁõÆ„ÇíÂé≥ÂØÜ„Å™JSONÂΩ¢Âºè„ÅßÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

* **etymology:** Ë™ûÊ∫êÔºàÊó•Êú¨Ë™ûÔºâ: ÂçòË™û„ÅÆÁî±Êù•
* **exampleSentence:** ‰æãÊñáÔºàËã±Ë™ûÔºâ: ÂçòË™û„Çí‰Ωø„Å£„Åü‰æãÊñá
* **contextLearning:** ‰ΩøÁî®Áä∂Ê≥ÅÔºàËã±Ë™ûÔºâ: ÂçòË™û„Åå‰ΩøÁî®„Åï„Çå„ÇãÊñáËÑà
* **pronunciation:** Áô∫Èü≥
  * **american:** „Ç¢„É°„É™„Ç´Ëã±Ë™û„ÅÆÁô∫Èü≥ÔºàÂõΩÈöõÈü≥Â£∞Ë®òÂè∑Ôºâ
  * **british:** „Ç§„ÇÆ„É™„ÇπËã±Ë™û„ÅÆÁô∫Èü≥ÔºàÂõΩÈöõÈü≥Â£∞Ë®òÂè∑Ôºâ
* **usageLevel:** ‰ΩøÁî®„É¨„Éô„É´ (1:„Éï„Ç©„Éº„Éû„É´, 2:ÊôÆÈÄö, 3:„Ç´„Ç∏„É•„Ç¢„É´)

**Âá∫Âäõ‰æã:**
{
  "etymology": "„ÇÆ„É™„Ç∑„É£Ë™û„ÅÆÔΩû„Åã„ÇâÊ¥æÁîü", // Ë™ûÊ∫êÔºàÊó•Êú¨Ë™ûÔºâ
  "exampleSentence": "The etymology...", // ‰æãÊñá
  "contextLearning": "Etymology is often used...", // ‰ΩøÁî®Áä∂Ê≥Å
  "pronunciation": {
    "american": "/Àå…õt…™Ààm…ëÀêl…ôd íi/", // „Ç¢„É°„É™„Ç´Ëã±Ë™û„ÅÆÁô∫Èü≥
    "british": "/Àå…õt…™Ààm…íl…ôd íi/"  // „Ç§„ÇÆ„É™„ÇπËã±Ë™û„ÅÆÁô∫Èü≥
  },
  "usageLevel": 1 // ‰ΩøÁî®„É¨„Éô„É´ (1:„Éï„Ç©„Éº„Éû„É´)
}
`;

const prisma = new PrismaClient();

export async function POST(request: Request) {
  const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

  try {
    const { searchTerm } = await request.json();
    if (!searchTerm) {
      return NextResponse.json(
        { error: "Search term is required" },
        { status: 400 }
      );
    }

    const userId = await getUserId();
    if (!userId) {
      return NextResponse.json(
        { error: "User not authenticated" },
        { status: 401 }
      );
    }

    const run = async () => {
      const model = genAI.getGenerativeModel({
        model: "gemini-1.5-flash",
        generationConfig: { responseMimeType: "application/json" },
      });
      const promptWithWord = prompt.replace("{word}", searchTerm);
      const result = await model.generateContent(promptWithWord);
      const response = await result.response;
      const text = response.text();
      if (!text) throw new Error("No response from the model");
      console.log("textüöÄ", text);
      return text;
    };

    const text = await run();
    const {
      etymology,
      exampleSentence,
      contextLearning,
      pronunciation,
      usageLevel,
    } = JSON.parse(text);

    const nextReviewAt = new Date();
    nextReviewAt.setDate(nextReviewAt.getDate() + 1);

    const word = await prisma.word.create({
      data: {
        userId,
        wordName: searchTerm,
        etymology,
        exampleSentence,
        contextLearning,
        pronunciation: JSON.stringify(pronunciation), // JSONÊñáÂ≠óÂàó„Å´Â§âÊèõ
        usageLevel: parseInt(usageLevel),
        learningSource: 1,
        learningStatus: 1,
        memo: "",
        correctCount: 0,
        lastCorrectAt: new Date(),
        nextReviewAt: nextReviewAt,
      },
    });

    return NextResponse.json({ data: word });
  } catch (error) {
    console.error("Error creating word:", error);
    return NextResponse.json(
      { error: error || "An error occurred" },
      { status: 500 }
    );
  }
}
